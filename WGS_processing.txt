# Analyzing bacterial whole-genomes sequenced at Novogene - bioinformatic pipeline adapted from Borelli, et al. "Combining functional genomics and whole-genome sequencing to detect antibiotic resistance genes in bacterial strains co-occurring simultaneously in a Brazilian hospital." Antibiotics 10.4 (2021): 419.

tar xvzf NovogeneFeb24.tar.gz # decompressing files 
rm -rf KT_* # removing Matheus' genomes and leaving only mine' and Valeria's 
mkdir mangrove_Genomes
mkdir valeria_genomes # then I moved the directories - one for each genome sequenced - to their corresponding projects' directories 

for dir in */; do
    echo "Extracting files from $dir"
    cd "$dir"
    gunzip *.fq.gz
    cd ..
done # decompressing files, did this loop once for mangrove and once for valeria's directories 

mkdir all_fastq
for dir in */; do
    echo "Sending file copy from $dir"
    cd "$dir"
    scp *.fq ../all_fastq
    cd ..
done

## Installing required packages for analyses
conda create --name genome-analysis
 conda install bioconda::trimmomatic
 conda install bioconda::flash
 conda install bioconda::spades   
 conda install bioconda::fastqc

### For those packages with conflict, I installed them in individual environments
conda deactivate

conda create --name prokka-genome
conda activate prokka-genome
conda install -c conda-forge -c bioconda -c defaults prokka # onda install of Prokka can be sensitive to channel order. Installing like this tends to work better 

conda create --name bowtie-genome
conda activate bowtie-genome
conda install bioconda::bowtie2

conda create --name checkm-genome
conda activate checkm-genome 
conda install bioconda::checkm-genome
conda deactivate 

conda create --name multiqc
conda activate multiqc
conda install bioconda::multiqc

## Quality check of raw data before trimming/clipping
mkdir fastqc_before # Create a directory to store FastQC results before trimming

conda activate genome-analysis
for dir in */; do
    echo "Running FastQC in directory: $dir"
    fastqc -o fastqc_before "${dir}"*.fq
done # Run FastQC on all .fq files in each subdirectory

conda deactivate 
conda activate multiqc
multiqc fastqc_before -p -f # Generate a multiqc report for all FastQC results
mv multiqc_report.html fastqc_before/multiqc_report_before.html # move the file to the fastq directory and rename it 
mv multiqc_* fastqc_before/ 

## Removing adapters and low quality reads with Trimmomatic v0.39 --- after checking the multiqc report, there's no need to remove adapters or to trim the reads
#java -jar /home/guilherme/miniconda3/envs/genome-analysis/share/trimmomatic-0.39-2/trimmomatic.jar PE -trimlog trimmomatic_mangrove.log  \
#-basein SA1_CKDN240001995-1A_H2YCMDSXC_L2_ \
#-baseout SA1_output_paired SA1_output_unpaired \
#ILLUMINACLIP: \
#LEADING: \
#TRAILING: \
#SLIDINGWINDOW: \
#MINLEN: 
  
## Filter out possible human contamination from genomes 
### Download the Human Reference Genome
wget https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh38_latest/refseq_identifiers/GRCh38_latest_genomic.fna.gz 

mkdir bowtie_stuff # Create bowtie2 directory to store its files
mv GRCh38_latest_genomic.fna.gz bowtie_stuff
gunzip GRCh38_latest_genomic.fna.gz # extracting the fasta file 

mkdir all_fastq
find . -type f -name "*.fq" -exec scp {} all_fastq \; # I'm sending a copy of all fastq files to this subdirectory just to make things easier with bowtie2

### Index the Human Reference Genome:
bowtie2-build GRCh38_latest_genomic.fna human_index

### Align Reads Against the Human Reference Genome
mkdir bowtie_stuff/uncontaminated_reads # to store reads without human contamination
bowtie2 -x ~/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/bowtie_stuff/human_index -1 ~/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/all_fastq/*L2_1.fq -2 ~/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/all_fastq/*L2_2.fq -S human_aligned.sam --un bowtie_stuff/uncontaminated_reads -D 20 -R 3 -N 1 -L 20 --very-sensitive-local # 0.04% overall alignment rate, i.e. no contamination detected 

## Merging overlapped reads 
for file in *.fq; do
    filename=$(basename -- "$file") # Extract the filename without extensions
    filename_no_ext="${filename%-*}"
    flash "$filename_no_ext"-1A_H2YCMDSXC_L2_1.fq "$filename_no_ext"-1A_H2YCMDSXC_L2_2.fq -o "$filename_no_ext" -M 85
done

mkdir flash_output
mv *.fastq flash_output/
mv *.hist flash_output/
mv *.histogram flash_output/

zip histograms.zip *.histogram 
scp guilherme@143.107.194.159:/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/all_fastq/flash_output/histograms.zip . # compacting all histograms and sending them to my computer so I can visualize them; run this code on your own personal computer  

mkdir hist
mv *.hist hist/
mv *.histogram hist/ # just cleaning up this directory a little bit more 

## Genome assembly 

### Facing AttributeError: module 'collections' has no attribute 'Hashable' when running Spades
sed -i 's/collections\.Hashable/collections\.abc\.Hashable/g' /home/guilherme/miniconda3/envs/genome-analysis/share/spades-3.13.0-0/share/spades/pyyaml3/constructor.py


### Checking Spades installation before running it 
~/miniconda3/envs/genome-analysis/bin/spades.py --test # ========= TEST PASSED CORRECTLY.

### Running Spades genome assembler 
mkdir assembled_genomes

input="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/all_fastq/flash_output"
for file in "$input"/*.fastq; do
    filename=$(basename -- "$file")
    filename_no_ext="${filename%.*.*}" 
    
    assembly_dir="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/assembled_genomes/${filename_no_ext}_assembly"
    mkdir -p "$assembly_dir" # Create a directory for the current genome assembly to store this output 
    
    ~/miniconda3/envs/genome-analysis/bin/spades.py -o "$assembly_dir" --merged "$filename_no_ext.extendedFrags.fastq" -s "$filename_no_ext.notCombined_1.fastq" -s "$filename_no_ext.notCombined_2.fastq"
done

### Running plasmidSPAdes - to recover only plasmids from WGS 
mkdir plasmidSPAdes_output

input="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/all_fastq/flash_output"
for file in "$input"/*.fastq; do
    filename=$(basename -- "$file")
    filename_no_ext="${filename%.*.*}"

    assembly_dir="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/plasmidSPAdes_output/${filename_no_ext}_plasmid_assembly"
    mkdir -p "$assembly_dir" # Create a directory for the current genome assembly to store this output 
    
    ~/miniconda3/envs/genome-analysis/bin/spades.py -o "$assembly_dir" --merged "$filename_no_ext.extendedFrags.fastq" -s "$filename_no_ext.notCombined_1.fastq" -s "$filename_no_ext.notCombined_2.fastq" --plasmid
done


## Renaming scaffold files so they contain the isolate code in their name and are located un a different directory altogether 

### For genome assemblies
mkdir all_scaffolds
for dir in *_assembly/; do
    echo "Renaming/moving scaffold file from $dir"
    isolate=$(basename -- "$dir" | sed 's/_.*//') 
    cd "$dir"
    mv scaffolds.fasta ../all_scaffolds/"$isolate"_scaffold.fasta 
    cd ..
done

### For plasmid assemblies
mkdir all_scaffolds
for dir in *_plasmid_assembly/; do
    echo "Renaming/moving scaffold file from $dir"
    isolate=$(basename -- "$dir" | sed 's/_.*//') 
    cd "$dir"
    scp scaffolds.fasta ../all_scaffolds/"$isolate"_plasmids.fasta 
    cd ..
done

## Quality control of assembled genomes 

### with CheckM
#conda activate checkm-genome 
#checkm lineage_wf all_scaffolds checkm_output -x fasta ############# NOT ENOUGH RAM MEMORY TO PLACE BINS IN REF GENOME TREE
#checkm len_hist genome_files lenghist_plots # might be interesting to do with fewer genomes 

### with QUAST - produces better plots of several quality metrics, but don't inform explicitly about % completeness/contamination
~/guilherme/miniconda3/envs/quast/bin/quast.py *_scaffold.fasta # for genomes

~/guilherme/miniconda3/envs/quast/bin/quast.py *_plasmids.fasta # for plasmids 
mv quast_results/ quast_results_plasmids


# Genome annotation 

for file in ./*_scaffold.fasta; do
    filename=$(basename -- "$file")
    filename_no_ext="${filename%_scaffold.fasta}"
    prokka "$file" --outdir "${filename_no_ext}_prokka_out" --force
done

## for plasmids
for file in ./*_plasmids.fasta; do
    prokka "$file" --outdir "${file}_prokkaOUT" --force --centre X --compliant
done

## Processing prokka output 

mkdir all_fna_genomes
mkdir all_gff_genomes

outdir="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/assembled_genomes/all_scaffolds/all_fna_genomes" # specifying the output directory
for dir in *_prokka_out/ ; do
    echo "Renaming/moving fna file from $dir"
    dirname=$(basename -- "$dir")
    scp "$dir"/PROKKA_03062024.fna "$outdir"/"$dirname".fna 
done # copying all .fna files to a separated directory 

outdir="/home/guilherme/Documents/novogene_genomes_feb24/NovogeneFeb2024/usftp21.novogene.com/01.RawData/mangrove_Genomes/assembled_genomes/all_scaffolds/all_gff_genomes" # specifying the output directory
for dir in *_prokka_out/ ; do
    echo "Renaming/moving fna file from $dir"
    dirname=$(basename -- "$dir")
    scp "$dir"/PROKKA_03062024.gff "$outdir"/"$dirname".gff 
done # copying all .gff files to a separated directory 

# Functional annotation 
## ABRICATE
### As usual
conda create --name abricate
conda install -c conda-forge -c bioconda -c defaults abricate
abricate --check
abricate --list

### Running abricate on different databases
abricate --db ncbi *_scaffold.fasta > ARGs-ncbi_genomes.faa # running abricate using NCBI database
abricate --summary ARGs-ncbi_genomes.faa > sum_ARGs_genomes.faa # create boolean table of ARG coverage on genomes

mkdir abricate_output
mv *.faa abricate_output/

abricate --db vfdb ../*_scaffold.fasta > ./ARGs-vfdb_genomes.faa 
abricate --db plasmidfinder ../*_scaffold.fasta > ./ARGs-plasmids_genomes.faa
abricate --db card ../*_scaffold.fasta > ./ARGs-card_genomes.faa
abricate --summary ARGs-card_genomes.faa > sumCARD_ARGs_genomes.faa

## AntiSMASH - web server DONE! (default parameters)

## Taxonomy - TYGS web server DONE! (default parameters)









